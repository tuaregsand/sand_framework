name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Run linting
      run: |
        flake8 .
        black . --check
        isort . --check-only

    - name: Run security checks
      run: |
        bandit -r .
        safety check

    - name: Run tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/0
      run: |
        pytest --cov=. --cov-report=xml

    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')

    steps:
    - uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push API Gateway
      uses: docker/build-push-action@v4
      with:
        context: .
        file: api_gateway/Dockerfile
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/solana-api-gateway:${{ github.sha }}

    - name: Build and push Agents
      uses: docker/build-push-action@v4
      with:
        context: .
        file: agents/Dockerfile
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/solana-agents:${{ github.sha }}

    - name: Build and push Discord Bot
      uses: docker/build-push-action@v4
      with:
        context: .
        file: discord_bot/Dockerfile
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/solana-discord-bot:${{ github.sha }}

  deploy-staging:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2

    - name: Update ECS services
      run: |
        aws ecs update-service --cluster staging-cluster --service api-gateway --force-new-deployment
        aws ecs update-service --cluster staging-cluster --service agents --force-new-deployment
        aws ecs update-service --cluster staging-cluster --service discord-bot --force-new-deployment

  deploy-production:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://api.solana-agents.com
    
    steps:
    - uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2

    - name: Update ECS services
      run: |
        aws ecs update-service --cluster production-cluster --service api-gateway --force-new-deployment
        aws ecs update-service --cluster production-cluster --service agents --force-new-deployment
        aws ecs update-service --cluster production-cluster --service discord-bot --force-new-deployment
